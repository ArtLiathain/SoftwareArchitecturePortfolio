
@article{appleby_merlin_2022,
	title = {Merlin++, a flexible and feature-rich accelerator physics and particle tracking library},
	volume = {271},
	issn = {0010-4655},
	url = {https://www.sciencedirect.com/science/article/pii/S0010465521003167},
	doi = {10.1016/j.cpc.2021.108204},
	abstract = {Merlin++ is a C++ charged-particle tracking library developed for the simulation and analysis of complex beam dynamics within high energy particle accelerators. Accurate simulation and analysis of particle dynamics is an essential part of the design of new particle accelerators, and for the optimization of existing ones. Merlin++ is a feature-full library with focus on long-term tracking studies. A user may simulate distributions of protons or electrons in either single particle or sliced macro-particle bunches. The tracking code includes both straight and curvilinear coordinate systems allowing for the simulation of either linear or circular accelerator lattice designs, and uses a fast and accurate explicit symplectic integrator. Physics processes for common design studies have been implemented, including {RF} cavity acceleration, synchrotron radiation damping, on-line physical aperture checks and collimation, proton scattering, wakefield simulation, and spin-tracking. Merlin++ was written using C++ object orientated design practices and has been optimized for speed using multicore processors. This article presents an account of the program, including its functionality and guidance for use.
Program summary
Program Title: Merlin++ {CPC} Library link to program files: https://doi.org/10.17632/4x4nsbhz37.1 Developer's repository link: 10.5281/zenodo.3700155 Licensing provisions: {GPLv}2+ Programming language: C++ Nature of problem: Complexity of particle accelerators beam dynamics over extensive tracking distances. Solution method: Long-term particle accelerator and tracking simulations utilizing explicit symplectic integrators. Additional comments including restrictions and unusual features: For further information see github.com/Merlin-Collaboration},
	pages = {108204},
	journaltitle = {Computer Physics Communications},
	shortjournal = {Computer Physics Communications},
	author = {Appleby, Robert B. and Barlow, Roger J. and Krücker, Dirk and Molson, James and Rowan, Scott and Tygier, Sam and Rafique, Haroon and Walker, Nicholas and Wolski, Andrzej},
	urldate = {2025-10-23},
	date = {2022-02-01},
	keywords = {Collimation, Electron, {LHC}, Particle accelerator, Proton, Sliced macroparticle, Symplectic, Tracking},
	file = {Full Text:/home/art/Zotero/storage/NZ3IBG2B/Appleby et al. - 2022 - Merlin++, a flexible and feature-rich accelerator physics and particle tracking library.pdf:application/pdf;ScienceDirect Snapshot:/home/art/Zotero/storage/8KAD4BZA/S0010465521003167.html:text/html},
}

@book{ernst_technical_2021,
	title = {Technical Debt in Practice: How to Find It and Fix It},
	isbn = {978-0-262-36630-4},
	shorttitle = {Technical Debt in Practice},
	abstract = {The practical implications of technical debt for the entire software life cycle; with examples and case studies.
Technical debt in software is incurred when developers take shortcuts and make ill-advised technical decisions in the initial phases of a project, only to be confronted with the need for costly and labor-intensive workarounds later. This book offers advice on how to avoid technical debt, how to locate its sources, and how to remove it. It focuses on the practical implications of technical debt for the entire software lifecycle, with examples and case studies from companies that range from Boeing to Twitter.
Technical debt is normal; it is part of most iterative development processes. But if debt is ignored, over time it may become unmanageably complex, requiring developers to spend all of their effort fixing bugs, with no time to add new features—and after all, new features are what customers really value. The authors explain how to monitor technical det, how to measure it, and how and when to pay it down. Broadening the conventional definition of technical debt, they cover requirements debt, implementation debt, testing debt, architecture debt, documentation debt, deployment debt, and social debt. They intersperse technical discussions with “Voice of the Practitioner” sidebars that detail real-world experiences with a variety of technical debt issues.},
	author = {Ernst, Neil and Kazman, Rick and Delange, Julien},
	date = {2021-08-17},
	doi = {10.7551/mitpress/12440.001.0001},
	file = {Full Text:/home/art/Zotero/storage/8969PIRT/Ernst et al. - 2021 - Technical Debt in Practice How to Find It and Fix It.pdf:application/pdf},
}

@online{noauthor_introduction_nodate,
	title = {Introduction — {iDaVIE} 1.0 documentation},
	url = {https://idavie.readthedocs.io/en/latest/introduction.html},
	urldate = {2025-10-23},
	file = {Introduction — iDaVIE 1.0 documentation:/home/art/Zotero/storage/E8UJQ9I6/introduction.html:text/html},
}

@online{noauthor_acts_nodate,
	title = {{ACTS} Common Tracking Software — Acts documentation},
	url = {https://acts.readthedocs.io/en/latest/},
	urldate = {2025-10-24},
}

@collection{microsoft_corporation_net_2009,
	location = {Redmond, Wash.},
	edition = {2. ed},
	title = {{NET} application architecture guide},
	isbn = {978-0-7356-2710-9},
	series = {Patterns \& Practices},
	pagetotal = {496},
	publisher = {Microsoft Press},
	editor = {{Microsoft Corporation}},
	date = {2009},
}

@book{gharbi_software_2019,
	location = {Heidelberg},
	title = {Software Architecture Fundamentals: A Study Guide for the Certified Professional for Software Architecture® – Foundation Level – {iSAQB} compliant},
	isbn = {978-3-86490-625-1 978-3-96088-644-0},
	shorttitle = {Software Architecture Fundamentals},
	abstract = {Software architecture is an important factor for the success of any software project. In the context of systematic design and construction, solid software architecture ensures the fulfilment of quality requirements such as expandability, flexibility, performance, and time-to-market. Software architects reconcile customer requirements with the available technical options and the prevailing conditions and constraints. They ensure the creation of appropriate structures and smooth interaction of all system components. As team players, they work closely with software developers and other parties involved in the project. This book gives you all the basic know-how you need to begin designing scalable system software architectures. It goes into detail on all the most important terms and concepts and how they relate to other {IT} practices. Following on from the basics, it describes the techniques and methods required for the planning, documentation, and quality management of software architectures. It details the role, the tasks, and the work environment of a software architect, as well as looking at how the job itself is embedded in company and project structures. The book is designed for self-study and covers the curriculum for the Certified Professional for Software Architecture – Foundation Level ({CPSA}-F) exam as defined by the International Software Architecture Qualification Board ({iSAQB})},
	pagetotal = {1},
	publisher = {dpunkt.verlag},
	author = {Gharbi, Mahbouba and Koschel, Arne and Rausch, Andreas},
	date = {2019},
	file = {Table of Contents PDF:/home/art/Zotero/storage/YQUPU2ZR/Gharbi et al. - 2019 - Software Architecture Fundamentals A Study Guide for the Certified Professional for Software Archit.pdf:application/pdf},
}

@article{solernou_fluctuating_2018,
	title = {Fluctuating Finite Element Analysis ({FFEA}): A continuum mechanics software tool for mesoscale simulation of biomolecules},
	volume = {14},
	issn = {1553-7358},
	url = {https://dx.plos.org/10.1371/journal.pcbi.1005897},
	doi = {10.1371/journal.pcbi.1005897},
	shorttitle = {Fluctuating Finite Element Analysis ({FFEA})},
	pages = {e1005897},
	number = {3},
	journaltitle = {{PLOS} Computational Biology},
	shortjournal = {{PLoS} Comput Biol},
	author = {Solernou, Albert and Hanson, Benjamin S. and Richardson, Robin A. and Welch, Robert and Read, Daniel J. and Harlen, Oliver G. and Harris, Sarah A.},
	editor = {Poisot, Timothée},
	urldate = {2025-10-24},
	date = {2018-03-23},
	langid = {english},
	file = {Full Text:/home/art/Zotero/storage/BEG6H9WY/Solernou et al. - 2018 - Fluctuating Finite Element Analysis (FFEA) A continuum mechanics software tool for mesoscale simula.pdf:application/pdf},
}
